
14_timer_input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00001418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00001418  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000410  08000410  00001418  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000410  08000418  00001418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000418  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000418  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000062c  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a5  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e9e  00000000  00000000  00001ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d59  00000000  00000000  00002b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed1c  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000925f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  0009263c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00092704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003f8 	.word	0x080003f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003f8 	.word	0x080003f8

08000204 <main>:
#include "systick.h"
#include "tim.h"


int timestamp = 0;
int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	timer2_pa5_output_compare();
 8000208:	f000 f814 	bl	8000234 <timer2_pa5_output_compare>
	timer3_pa6_input_capture();
 800020c:	f000 f862 	bl	80002d4 <timer3_pa6_input_capture>

	while(1)
	{
		/*Wait until edge is captured*/
		while(!(TIM3->SR & SR_CC1IF)){}
 8000210:	bf00      	nop
 8000212:	4b06      	ldr	r3, [pc, #24]	@ (800022c <main+0x28>)
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	f003 0302 	and.w	r3, r3, #2
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <main+0xe>

		/*Read captured value*/
		timestamp = TIM3->CCR1;
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <main+0x28>)
 8000220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000222:	461a      	mov	r2, r3
 8000224:	4b02      	ldr	r3, [pc, #8]	@ (8000230 <main+0x2c>)
 8000226:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 8000228:	e7f2      	b.n	8000210 <main+0xc>
 800022a:	bf00      	nop
 800022c:	40000400 	.word	0x40000400
 8000230:	2000001c 	.word	0x2000001c

08000234 <timer2_pa5_output_compare>:
	TIM2->CR1 = CR1_CEN;

}

void timer2_pa5_output_compare(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	/*Configuring PA5 in alternate function mode AF01*/
	RCC->AHB1ENR = GPIOA_EN;
 8000238:	4b24      	ldr	r3, [pc, #144]	@ (80002cc <timer2_pa5_output_compare+0x98>)
 800023a:	2201      	movs	r2, #1
 800023c:	631a      	str	r2, [r3, #48]	@ 0x30
	GPIOA->MODER &=~(1U<<10);
 800023e:	4b24      	ldr	r3, [pc, #144]	@ (80002d0 <timer2_pa5_output_compare+0x9c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a23      	ldr	r2, [pc, #140]	@ (80002d0 <timer2_pa5_output_compare+0x9c>)
 8000244:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000248:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 800024a:	4b21      	ldr	r3, [pc, #132]	@ (80002d0 <timer2_pa5_output_compare+0x9c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a20      	ldr	r2, [pc, #128]	@ (80002d0 <timer2_pa5_output_compare+0x9c>)
 8000250:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000254:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (1U<<20);
 8000256:	4b1e      	ldr	r3, [pc, #120]	@ (80002d0 <timer2_pa5_output_compare+0x9c>)
 8000258:	6a1b      	ldr	r3, [r3, #32]
 800025a:	4a1d      	ldr	r2, [pc, #116]	@ (80002d0 <timer2_pa5_output_compare+0x9c>)
 800025c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000260:	6213      	str	r3, [r2, #32]

	 /*Enable clock access*/
	RCC->APB1ENR |= TIM2EN;
 8000262:	4b1a      	ldr	r3, [pc, #104]	@ (80002cc <timer2_pa5_output_compare+0x98>)
 8000264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000266:	4a19      	ldr	r2, [pc, #100]	@ (80002cc <timer2_pa5_output_compare+0x98>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set prescaler*/
	TIM2->PSC = 1600-1;		// 16000000/1600 = 10000
 800026e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000272:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000276:	629a      	str	r2, [r3, #40]	@ 0x28
	/*set auto reload value*/
	TIM2->ARR = 10000-1;	// 10000/10000 = 1Hz
 8000278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000280:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Set output compare toggle mode*/
	TIM2->CCMR1 |= (1U<<4);
 8000282:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1U<<5);
 8000292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029c:	f043 0320 	orr.w	r3, r3, #32
 80002a0:	6193      	str	r3, [r2, #24]
	/*Enable timer 2 channel 1 since PA5 is connected to TIM2_CH1*/
	TIM2->CCER |= (1U<<0);
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6213      	str	r3, [r2, #32]


	/*clear counter*/
	TIM2->CNT = 0;
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	@ 0x24
	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 80002ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002be:	2201      	movs	r2, #1
 80002c0:	601a      	str	r2, [r3, #0]

}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000

080002d4 <timer3_pa6_input_capture>:
void timer3_pa6_input_capture(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	/*Timer 3 channel 1 is connected to PA6 alternate function AF2*/

	/*Enable clock access*/
	RCC->AHB1ENR = GPIOA_EN;
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <timer3_pa6_input_capture+0x7c>)
 80002da:	2201      	movs	r2, #1
 80002dc:	631a      	str	r2, [r3, #48]	@ 0x30

	/*Alternate function*/
	GPIOA->MODER &=~(1U<<12);
 80002de:	4b1d      	ldr	r3, [pc, #116]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 80002e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002e8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<13);
 80002ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a19      	ldr	r2, [pc, #100]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 80002f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002f4:	6013      	str	r3, [r2, #0]

	/*Set the alternate function to AF02*/
	GPIOA->AFR[0] &=~(1U<<27);
 80002f6:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 80002f8:	6a1b      	ldr	r3, [r3, #32]
 80002fa:	4a16      	ldr	r2, [pc, #88]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 80002fc:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000300:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<26);
 8000302:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 8000304:	6a1b      	ldr	r3, [r3, #32]
 8000306:	4a13      	ldr	r2, [pc, #76]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 8000308:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800030c:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<24);
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 8000310:	6a1b      	ldr	r3, [r3, #32]
 8000312:	4a10      	ldr	r2, [pc, #64]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 8000314:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000318:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<25);
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 800031c:	6a1b      	ldr	r3, [r3, #32]
 800031e:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <timer3_pa6_input_capture+0x80>)
 8000320:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000324:	6213      	str	r3, [r2, #32]

	/*Enable clock access to timer 3*/
	RCC->APB1ENR = TIM3EN;
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <timer3_pa6_input_capture+0x7c>)
 8000328:	2202      	movs	r2, #2
 800032a:	641a      	str	r2, [r3, #64]	@ 0x40

	/*Set prescaler*/
	TIM3->PSC = 16000-1;
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <timer3_pa6_input_capture+0x84>)
 800032e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000332:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Set ch1 to input capture */
	TIM3->CCER = CCER_CC1S;
 8000334:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <timer3_pa6_input_capture+0x84>)
 8000336:	2201      	movs	r2, #1
 8000338:	621a      	str	r2, [r3, #32]

	/*Set ch1 to capture at rising edge*/
	TIM3->CCER = CCER_CC1E;
 800033a:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <timer3_pa6_input_capture+0x84>)
 800033c:	2201      	movs	r2, #1
 800033e:	621a      	str	r2, [r3, #32]

	/*Enable timer 3*/
	TIM3->CR1= CR1_CEN;
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <timer3_pa6_input_capture+0x84>)
 8000342:	2201      	movs	r2, #1
 8000344:	601a      	str	r2, [r3, #0]



}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40023800 	.word	0x40023800
 8000354:	40020000 	.word	0x40020000
 8000358:	40000400 	.word	0x40000400

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	@ (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	@ (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	@ (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff39 	bl	8000204 <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	20000020 	.word	0x20000020

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	@ (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	@ (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	@ (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	@ (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
